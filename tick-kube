#!/bin/bash

BP=$GOPATH/src/github.com/jackzampolin/tick-kube

# Name of cluster 
CLUSTER=sales-demo-cluster

# Name of gcloud project
PROJECT=influx-perf-testing

# gcloud region
REGION=us-west1

# gcloud zone
ZONE=us-west1-b

# num GB of disk for nodes 
DISK=100

# gcloud instance types
MACHINE=n1-standard-1

# Number of nodes for kubernetes cluster
NUM_NODES=3

# InfluxDB Disk Size
INFLUX_DISK=25GB

# Chronograf and Kapacitor Disk Sizes
OTHER_DISK=10GB



kube () {
  kubectl apply -f $1
}

create-tick () {
  echo "Creating tick..."
  echo "tick is the full stack of InfluxData products running in production configuration"
  kube $BP/namespace.yaml
  kubectl create configmap --namespace tick telegraf-config --from-file $BP/telegraf/telegraf.conf
  kubectl create configmap --namespace tick influxdb-config --from-file $BP/influxdb/influxdb.conf
  kube $BP/influxdb/deployment.yaml
  kube $BP/influxdb/service.yaml
  kube $BP/kapacitor/deployment.yaml
  kube $BP/kapacitor/service.yaml
  kube $BP/telegraf/daemonset.yaml
  kube $BP/chronograf/deployment.yaml
  kube $BP/chronograf/service.yaml
  echo "Waiting for public IP..."
  kubectl get svc --namespace tick chronograf -w
}

create-disks () {
  echo "Creating persistent disks for the tick stack..."
  echo "InfluxDB Disk: $INFLUX_DISK"
  echo "Kapacitor Disk: $OTHER_DISK"
  echo "chronograf Disk: $OTHER_DISK"
  gcloud compute disks create chronograf kapacitor --size=$OTHER_DISK
  gcloud compute disks create influxdb --size=$INFLUX_DISK
}

delete-disks () {
  echo "Deleting disks for tick..."
  gcloud compute disks delete chronograf kapacitor influxdb
}

delete-tick () {
  kubectl delete ns tick
}

config-list () {
  project=$(gcloud config list project --format="value(core.project)" 2> /dev/null)
  zone=$(gcloud config list compute/zone --format="value(compute.zone)" 2> /dev/null)
  region=$(gcloud config list compute/region --format="value(compute.region)" 2> /dev/null)
  cluster=$(kubectl config current-context)
  cat <<-HERE
CURRENT CONFIG:
  project -> $project 
  zone    -> $zone 
  region  -> $region 
  cluster -> $cluster 
HERE
}

create-cluster () {
  echo "Creating a $NUM_NODES node cluster of $MACHINE VMs with $DISK GB size disks."
  gcloud container clusters create --disk-size $DISK --machine-type $MACHINE --num-nodes $NUM_NODES $CLUSTER 
  gcloud container clusters get-credentials $CLUSTER
}

delete-cluster () {
  gcloud container clusters delete $CLUSTER
}

config-set () {
  echo "Setting PROJECT to '$PROJECT'"
  nohup gcloud config set project $PROJECT > /dev/null
  echo "Setting ZONE to '$ZONE'"
  nohup gcloud config set compute/zone $ZONE > /dev/null
  echo "Setting REGION to '$REGION'"
  nohup gcloud config set compute/region $REGION > /dev/null
}

attach () {
  if [ -z $1 ]; then 
    echo "USAGE:"
    attach-usage
    exit 1
  else 
    echo "namespace: '$1'"; 
  fi
  if [ -z $2 ]; 
    then echo "app not specified"; 
    exit 1
  else 
    echo "app: '$2'"; 
  fi
  kubectl port-forward \
    --namespace $1 \
    $(kubectl get pods --namespace $1 -l app=$2 --output=jsonpath="{.items[0].metadata.name}") \
    $(kubectl get pods --namespace $1 -l app=$2 --output=jsonpath="{.items[0].spec.containers[0].ports[0].containerPort}")
}

update () {
  case $1 in
    chronograf)
      kubectl delete pods --namespace tick -l app=chronograf
      exit 0
      ;;
    influxdb)
      kubectl delete pods --namespace tick -l app=influxdb
      exit 0
      ;;
    telegraf)
      kubectl delete configmap --namespace tick telegraf-config
      kubectl create configmap --namespace tick telegraf-config --from-file $BP/telegraf/telegraf.conf 
      kubectl delete pod --namespace tick -l app=telegraf
      exit 0
      ;;
    kapacitor)
      kubectl delete pods --namespace tick -l app=kapacitor
      exit 0
      ;;
    *)
      cat <<-HERE
USAGE:
  $0 update {application}
  
OPTIONS:
  - chronograf - pulls new code, builds images, pushes and restarts podss
  - influxdb
  - telegraf - updates configmap and restarts pods
  - kapacitor
HERE
      exit 1
  esac
}

attach-usage () {
  cat <<-HERE
  $0 attach
    - attaches to a pod port for given a namespace and app tag
    $ $0 attach tick influxdb
  
HERE
}

config-usage () {
  cat <<-HERE
  $0 config
  - config has the following subcommands
    
    - lists current gcloud and kubectl context
    $ $0 config list
    
    - sets config to variables at top of file
    $ $0 config set
    
HERE
}

create-usage () {
  cat <<-HERE 
USAGE:
  $0 create
  - create has the following subcommands
  
    - creates cluster to run this example
    $ $0 create cluster
    
    - creates all gcloud persistent disks for this application 
    $ $0 create disks
  
    - creates all kube based resources for this application 
    $ $0 create tick
    
HERE
}

delete-usage () {
  cat <<-HERE
USAGE:
  $0 delete
  - delete has the following subcommands
  
    - deletes the gcloud persistent disks for this application
    $ $0 delete disks
      
    - deletes the gcloud cluster for this application
    $ $0 delete cluster
      
    - deletes the namespace and any other kube based resources for this application
    $ $0 delete tick
    
HERE
}

spin-usage () {
  cat <<-HERE
USAGE:
  $0 spin
  - spin has the following subcommands
  
    - spins up a new cluster w/ all resources and provisions the full tick stack
    $ $0 spin-up

    - deletes the cluster and all associated resources
    $ $0 spin-down
    
HERE
}

update-usage () {
  cat <<-HERE
USAGEL
  $0 update {appliation}
    - deletes the pods for this application allowing the RC to spin up new ones
    $ $0 update {application}
    
    - pass no args application list
    $ $0 update
    
HERE
}

usage () {
  echo "USAGE: $0 $1"
  attach-usage
  config-usage
  create-usage
  delete-usage
  spin-usage
  update-usage
}

create () {
  case $1 in
    tick)
      create-tick
      exit 0
      ;;
    cluster)
      create-cluster
      exit 0
      ;;
    disks)
      create-disks
      exit 0
      ;;
    *)
      create-usage
      exit 1
      ;;
  esac
}

delete () {
  case $1 in
    tick)
      delete-tick
      exit 0
      ;;
    cluster)
      delete-cluster
      exit 0
      ;;
    disks)
      delete-disks
      exit 0
      ;;
    *)
      delete-usage
      exit 1
      ;;
  esac
}

config () {
  case $1 in 
    list)
      config-list
      exit 0
      ;;
    set)
      config-set
      exit 0
      ;;
    *) 
      echo "USAGE:"
      config-usage
      exit 1
      ;;
  esac
}

spin () {
  case $1 in 
    up)
      config set
      create cluster
      create disks
      create tick
      exit 0
      ;;
    down)
      delete cluster
      delete disks
      exit 0
      ;;
    *)
      spin-usage
      exit 1
      ;;
  esac
}

case $1 in
  attach)
    attach $2 $3
    exit 0
    ;;
  config)
    config $2 $3
    exit 0
    ;;
  create)
    create $2 $3
    exit 0
    ;;
  delete)
    delete $2 $3
    exit 0
    ;;
  spin)
    spin $2 $3
    exit 0
    ;;
  update)
    update $2 $3
    exit 0
    ;;
  *)
    usage $2 $3 $4
    exit 1
    ;;
esac  
